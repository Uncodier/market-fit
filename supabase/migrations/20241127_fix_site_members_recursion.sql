-- Fix infinite recursion in site_members policies
-- This migration fixes the issue with "infinite recursion detected in policy for relation site_members"

-- Create a view that will be used in policies to avoid self-reference recursion
CREATE OR REPLACE VIEW public.site_direct_access AS
SELECT 
  id AS site_id, 
  user_id
FROM 
  public.sites;

-- Drop all existing policies on site_members to start fresh
DROP POLICY IF EXISTS "Site owners can view site members" ON public.site_members;
DROP POLICY IF EXISTS "Site owners and admins can add site members" ON public.site_members;
DROP POLICY IF EXISTS "Site owners and admins can update site members" ON public.site_members;
DROP POLICY IF EXISTS "Site owners and admins can delete site members" ON public.site_members;

-- Create new policies that avoid self-reference, using the view instead
-- SELECT policy
CREATE POLICY "Site owners can view site members"
ON public.site_members
FOR SELECT
USING (
  -- Direct site ownership from sites table via view
  site_id IN (SELECT site_id FROM public.site_direct_access WHERE user_id = auth.uid())
  OR
  -- User should see sites where they are already a member with owner/admin role
  (
    user_id = auth.uid() AND 
    role IN ('owner', 'admin', 'marketing', 'collaborator') AND
    status = 'active'
  )
);

-- INSERT policy
CREATE POLICY "Site owners and admins can add site members"
ON public.site_members
FOR INSERT
WITH CHECK (
  -- Direct site ownership from sites table via view
  site_id IN (SELECT site_id FROM public.site_direct_access WHERE user_id = auth.uid())
  OR
  -- Only owners/admins can add new members
  -- Use subquery pattern to avoid recursion
  EXISTS (
    SELECT 1 FROM public.site_members AS sm
    WHERE 
      sm.site_id = site_id AND
      sm.user_id = auth.uid() AND
      sm.role IN ('owner', 'admin') AND
      sm.status = 'active'
  )
);

-- UPDATE policy
CREATE POLICY "Site owners and admins can update site members"
ON public.site_members
FOR UPDATE
USING (
  -- Direct site ownership from sites table via view
  site_id IN (SELECT site_id FROM public.site_direct_access WHERE user_id = auth.uid())
  OR
  -- Only owners/admins can update members
  -- Use subquery pattern to avoid recursion
  EXISTS (
    SELECT 1 FROM public.site_members AS sm
    WHERE 
      sm.site_id = site_id AND
      sm.user_id = auth.uid() AND
      sm.role IN ('owner', 'admin') AND
      sm.status = 'active'
  )
);

-- DELETE policy
CREATE POLICY "Site owners and admins can delete site members"
ON public.site_members
FOR DELETE
USING (
  -- Direct site ownership from sites table via view
  site_id IN (SELECT site_id FROM public.site_direct_access WHERE user_id = auth.uid())
  OR
  -- Only owners/admins can delete members
  -- Use subquery pattern to avoid recursion
  EXISTS (
    SELECT 1 FROM public.site_members AS sm
    WHERE 
      sm.site_id = site_id AND
      sm.user_id = auth.uid() AND
      sm.role IN ('owner', 'admin') AND
      sm.status = 'active'
  )
);

-- Also fix the trigger function that might be causing recursion
-- When a site_member record is updated, we need to update the settings.team_members
CREATE OR REPLACE FUNCTION sync_site_members_to_team_members()
RETURNS TRIGGER AS $$
DECLARE
  team_members_json JSONB;
  tg_table_name TEXT;
  tg_op_type TEXT;
BEGIN
  -- Add recursion protection
  tg_table_name := TG_TABLE_NAME;
  tg_op_type := TG_OP;
  
  -- Skip if this is a recursive call generated by our own trigger
  IF current_setting('site_members.is_updating', TRUE) = 'true' THEN
    RETURN NULL;
  END IF;
  
  -- Set recursion protection flag
  PERFORM set_config('site_members.is_updating', 'true', TRUE);

  -- Get all site members for this site and convert to team_members format
  -- For INSERT/UPDATE, use NEW.site_id; for DELETE use OLD.site_id
  SELECT json_agg(json_build_object(
    'email', email,
    'role', 
    CASE 
      WHEN role = 'admin' THEN 'admin'
      WHEN role = 'marketing' THEN 'create'
      WHEN role = 'collaborator' THEN 'view'
      WHEN role = 'owner' THEN 'admin'
    END,
    'name', name,
    'position', position
  ))
  INTO team_members_json
  FROM public.site_members
  WHERE site_id = CASE 
    WHEN TG_OP = 'DELETE' THEN OLD.site_id
    ELSE NEW.site_id
  END
  AND status = 'active' AND role != 'owner';
  
  -- Only include non-null values
  team_members_json = COALESCE(team_members_json, '[]'::jsonb);
  
  -- Update the settings table
  UPDATE public.settings
  SET team_members = team_members_json
  WHERE site_id = CASE 
    WHEN TG_OP = 'DELETE' THEN OLD.site_id
    ELSE NEW.site_id
  END;
  
  -- Reset recursion protection flag
  PERFORM set_config('site_members.is_updating', 'false', TRUE);
  
  RETURN NULL; -- Return NULL for AFTER triggers
END;
$$ LANGUAGE plpgsql; 