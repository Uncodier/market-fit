import React from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/app/components/ui/card"
import { Badge } from "@/app/components/ui/badge"
import { Button } from "@/app/components/ui/button"
import { 
  Users, Settings, ChevronDown, ChevronUp, Ban, BarChart, User, Tag,
  Globe, HelpCircle, CalendarIcon, Shield, PieChart, Image, 
  MessageSquare, FileText, ShoppingCart, CheckCircle2, Eye
} from "@/app/components/ui/icons"
import { Segment } from "../page"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/app/components/ui/tabs"
import { Progress } from "@/app/components/ui/progress"
import dynamic from "next/dynamic"

// Define WorldMap component inline to avoid module imports issues
const WorldMap = ({ locations }: { locations: Array<{ type: string; name: string; relevance: string }> }) => {
  const regionColorMap: Record<string, string> = {
    'North America': '#34d399',
    'South America': '#60a5fa',
    'Europe': '#f87171',
    'Asia': '#fbbf24',
    'Africa': '#a78bfa',
    'Oceania': '#c084fc',
    'Latin America': '#60a5fa',
    'Middle East': '#f97316',
  }

  const relevanceOpacity: Record<string, number> = {
    'Very high': 0.8,
    'High': 0.6,
    'Medium-high': 0.5,
    'Medium': 0.4,
    'Low': 0.2,
  }

  const getRegionStyle = (regionName: string) => {
    // Find if this region is in our locations
    const location = locations?.find(loc => 
      loc.name.toLowerCase() === regionName.toLowerCase() || 
      regionName.toLowerCase().includes(loc.name.toLowerCase()) ||
      loc.name.toLowerCase().includes(regionName.toLowerCase())
    );
    
    const baseColor = regionColorMap[regionName] || '#94a3b8';
    
    if (location) {
      const opacity = relevanceOpacity[location.relevance] || 0.3;
      return {
        fill: baseColor,
        fillOpacity: opacity,
        stroke: '#475569',
        strokeWidth: 0.5,
        cursor: 'pointer',
      };
    }
    
    return {
      fill: '#94a3b8',
      fillOpacity: 0.15,
      stroke: '#475569',
      strokeWidth: 0.5,
    };
  };

  return (
    <div className="relative">
      <svg
        viewBox="0 0 1000 500"
        className="w-full h-auto"
        aria-label="World map showing ICP locations"
      >
        {/* Simplified world map with main regions */}
        <g>
          {/* North America */}
          <path
            d="M150,120 L300,120 L300,220 L150,220 Z"
            style={getRegionStyle('North America')}
          />
          <text x="225" y="170" className="text-xs font-medium" textAnchor="middle">North America</text>
          
          {/* South America */}
          <path
            d="M220,240 L320,240 L320,340 L220,340 Z"
            style={getRegionStyle('South America')}
          />
          <text x="270" y="290" className="text-xs font-medium" textAnchor="middle">South America</text>
          
          {/* Europe */}
          <path
            d="M450,120 L550,120 L550,190 L450,190 Z"
            style={getRegionStyle('Europe')}
          />
          <text x="500" y="155" className="text-xs font-medium" textAnchor="middle">Europe</text>
          
          {/* Africa */}
          <path
            d="M450,210 L550,210 L550,310 L450,310 Z"
            style={getRegionStyle('Africa')}
          />
          <text x="500" y="260" className="text-xs font-medium" textAnchor="middle">Africa</text>
          
          {/* Asia */}
          <path
            d="M600,120 L750,120 L750,270 L600,270 Z"
            style={getRegionStyle('Asia')}
          />
          <text x="675" y="195" className="text-xs font-medium" textAnchor="middle">Asia</text>
          
          {/* Oceania */}
          <path
            d="M700,300 L780,300 L780,350 L700,350 Z"
            style={getRegionStyle('Oceania')}
          />
          <text x="740" y="325" className="text-xs font-medium" textAnchor="middle">Oceania</text>
          
          {/* Middle East */}
          <path
            d="M560,170 L620,170 L620,230 L560,230 Z"
            style={getRegionStyle('Middle East')}
          />
          <text x="590" y="200" className="text-xs font-medium" textAnchor="middle">ME</text>
        </g>
      </svg>
      
      {/* Legend */}
      <div className="mt-2 flex flex-wrap gap-3 text-xs">
        {locations?.map((location, idx) => (
          <div key={idx} className="flex items-center">
            <span 
              className="w-3 h-3 mr-1 inline-block rounded-sm" 
              style={{ 
                backgroundColor: regionColorMap[location.name] || '#94a3b8',
                opacity: relevanceOpacity[location.relevance] || 0.3
              }}
            />
            <span>{location.name}: {location.relevance}</span>
          </div>
        ))}
      </div>
    </div>
  )
};

interface SegmentICPTabProps {
  segment: Segment
}

// Extend the existing ICP type to include the profile property
interface ExtendedICP {
  role?: string;
  company_size?: string;
  industry?: string;
  age_range?: string;
  pain_points?: string[];
  goals?: string[];
  budget?: string;
  decision_maker?: boolean;
  location?: string;
  experience?: string;
  profile?: ICPProfileData;
}

interface ICPProfileData {
  id: string;
  name: string;
  description: string;
  demographics: {
    ageRange: {
      primary: string;
      secondary: string;
    };
    gender: {
      distribution: string;
    };
    locations: Array<{
      type: string;
      name: string;
      relevance: string;
    }>;
    education: {
      primary: string;
      secondary: string[];
    };
    income: {
      currency: string;
      level: string;
      range: string;
    };
    languages: Array<{
      name: string;
      proficiency: string;
      relevance: string;
    }>;
  };
  psychographics: {
    values: Array<{
      name: string;
      importance: string;
      description: string;
    }>;
    interests: string[];
    goals: Array<{
      name: string;
      priority: string;
      description: string;
    }>;
    challenges: Array<{
      name: string;
      severity: string;
      description: string;
    }>;
    motivations: Array<{
      name: string;
      strength: string;
      description: string;
    }>;
  };
  behavioralTraits: {
    onlineBehavior: {
      deviceUsage: {
        primary: string;
        secondary: string;
        tertiary: string;
      };
      socialPlatforms: Array<{
        name: string;
        usageFrequency: string;
        engagementLevel: string;
        relevance: string;
      }>;
      browsingHabits: {
        peakHours: string[];
        contentPreferences: string[];
      };
    };
    purchasingBehavior: {
      decisionFactors: Array<{
        name: string;
        importance: string;
        description: string;
      }>;
      priceRange: {
        subscription: {
          monthly: {
            preference: string;
            optimal: string;
          };
          annual: {
            preference: string;
            optimal: string;
          };
        };
        oneTime: {
          preference: string;
          optimal: string;
        };
      };
      purchaseFrequency: {
        software: string;
        hardware: string;
        education: string;
      };
    };
    contentConsumption: {
      preferredFormats: Array<{
        type: string;
        preference: string;
        idealDuration?: string;
        idealLength?: string;
      }>;
      researchHabits: {
        depth: string;
        sources: string[];
        timeSpent: string;
      };
    };
  };
  professionalContext: {
    industries: string[];
    roles: Array<{
      title: string;
      relevance: string;
    }>;
    companySize: {
      primary: string;
      secondary: string[];
    };
    decisionMakingPower: {
      level: string;
      description: string;
    };
    painPoints: Array<{
      name: string;
      severity: string;
      description: string;
    }>;
    tools: {
      current: string[];
      desired: string[];
    };
  };
  customAttributes: Array<{
    name: string;
    value: string;
    description: string;
  }>;
}

// Datos de ejemplo para mostrar la UI
const sampleICPProfile: ICPProfileData = {
  id: "icp_47f14b99-cfe9-4269-aad2-6ae50161de99_m86ln584",
  name: "Business Leaders and Executives",
  description: "Executives and business leaders seeking AI-powered solutions to optimize business management and operations",
  demographics: {
    ageRange: {
      primary: "35-50",
      secondary: "30-55"
    },
    gender: {
      distribution: "Balanced with slight male majority"
    },
    locations: [
      {
        type: "region",
        name: "North America",
        relevance: "High"
      },
      {
        type: "region",
        name: "Europe",
        relevance: "High"
      },
      {
        type: "region",
        name: "Latin America",
        relevance: "Medium"
      }
    ],
    education: {
      primary: "Master's Degree",
      secondary: [
        "Bachelor's Degree",
        "Doctorate"
      ]
    },
    income: {
      currency: "USD",
      level: "High",
      range: "100,000-250,000 annually"
    },
    languages: [
      {
        name: "English",
        proficiency: "Native",
        relevance: "Very high"
      },
      {
        name: "Spanish",
        proficiency: "Intermediate-advanced",
        relevance: "High"
      }
    ]
  },
  psychographics: {
    values: [
      {
        name: "Efficiency",
        importance: "Very high",
        description: "Value optimizing operations to achieve better results"
      },
      {
        name: "Innovation",
        importance: "High",
        description: "Appreciate adopting new technologies and approaches"
      },
      {
        name: "Leadership",
        importance: "High",
        description: "Seek to lead their teams effectively and with vision"
      },
      {
        name: "Results-driven",
        importance: "High",
        description: "Focus on achieving tangible business outcomes"
      }
    ],
    interests: [
      "Business management",
      "Artificial intelligence",
      "Automation",
      "Leadership development",
      "Productivity tools"
    ],
    goals: [
      {
        name: "Operational efficiency",
        priority: "High",
        description: "Streamline operations to reduce costs and increase productivity"
      },
      {
        name: "Scalability",
        priority: "High",
        description: "Grow the business sustainably and efficiently"
      },
      {
        name: "Employee performance",
        priority: "Medium",
        description: "Enhance the performance and satisfaction of their teams"
      },
      {
        name: "Strategic decision-making",
        priority: "Medium",
        description: "Make informed decisions based on accurate data"
      }
    ],
    challenges: [
      {
        name: "Time management",
        severity: "High",
        description: "Balancing multiple responsibilities and tasks effectively"
      },
      {
        name: "Technology integration",
        severity: "High",
        description: "Seamlessly integrating new technologies into existing systems"
      },
      {
        name: "Data overload",
        severity: "Medium",
        description: "Managing and making sense of large volumes of data"
      }
    ],
    motivations: [
      {
        name: "Business growth",
        strength: "High",
        description: "Desire to expand and grow their business successfully"
      },
      {
        name: "Innovation leadership",
        strength: "Medium-high",
        description: "Drive to be at the forefront of industry innovation"
      },
      {
        name: "Operational excellence",
        strength: "Very high",
        description: "Achieve high levels of efficiency and effectiveness in operations"
      }
    ]
  },
  behavioralTraits: {
    onlineBehavior: {
      deviceUsage: {
        primary: "Desktop",
        secondary: "Mobile",
        tertiary: "Tablet"
      },
      socialPlatforms: [
        {
          name: "LinkedIn",
          usageFrequency: "Daily",
          engagementLevel: "High",
          relevance: "Very high"
        },
        {
          name: "Twitter",
          usageFrequency: "Weekly",
          engagementLevel: "Medium",
          relevance: "High"
        },
        {
          name: "Facebook",
          usageFrequency: "Weekly",
          engagementLevel: "Medium",
          relevance: "Medium-high"
        }
      ],
      browsingHabits: {
        peakHours: [
          "Morning (6:00-9:00)",
          "Afternoon (12:00-14:00)"
        ],
        contentPreferences: [
          "Industry news",
          "Leadership articles",
          "Case studies"
        ]
      }
    },
    purchasingBehavior: {
      decisionFactors: [
        {
          name: "ROI",
          importance: "High",
          description: "Focus on the return on investment when making purchases"
        },
        {
          name: "Ease of Integration",
          importance: "High",
          description: "Prefer solutions that integrate smoothly with existing systems"
        },
        {
          name: "Scalability",
          importance: "Medium-high",
          description: "Value solutions that can scale with business growth"
        }
      ],
      priceRange: {
        subscription: {
          monthly: {
            preference: "100-500 USD",
            optimal: "Around 300 USD"
          },
          annual: {
            preference: "1000-5000 USD",
            optimal: "Around 3000 USD"
          }
        },
        oneTime: {
          preference: "500-3000 USD",
          optimal: "Around 1500 USD"
        }
      },
      purchaseFrequency: {
        software: "Semi-annually",
        hardware: "Annually",
        education: "Quarterly"
      }
    },
    contentConsumption: {
      preferredFormats: [
        {
          type: "Webinars",
          preference: "High",
          idealDuration: "30-60 minutes"
        },
        {
          type: "Whitepapers",
          preference: "Medium-high",
          idealLength: "10-20 pages"
        },
        {
          type: "Podcasts",
          preference: "Medium",
          idealDuration: "20-40 minutes"
        }
      ],
      researchHabits: {
        depth: "Deep",
        sources: [
          "Industry reports",
          "Expert opinions",
          "Case studies"
        ],
        timeSpent: "3-5 hours before important decisions"
      }
    }
  },
  professionalContext: {
    industries: [
      "Technology",
      "Finance",
      "Healthcare",
      "Manufacturing"
    ],
    roles: [
      {
        title: "CEO",
        relevance: "Very high"
      },
      {
        title: "COO",
        relevance: "High"
      },
      {
        title: "CIO",
        relevance: "Medium-high"
      },
      {
        title: "VP of Operations",
        relevance: "Medium"
      }
    ],
    companySize: {
      primary: "Medium (51-200)",
      secondary: [
        "Large (201-500)",
        "Enterprise (500+)"
      ]
    },
    decisionMakingPower: {
      level: "High",
      description: "Hold significant influence and final decision-making power"
    },
    painPoints: [
      {
        name: "Operational inefficiencies",
        severity: "High",
        description: "Struggle with optimizing processes for better efficiency"
      },
      {
        name: "Employee productivity",
        severity: "Medium",
        description: "Challenges in maintaining high levels of employee performance"
      },
      {
        name: "Data management",
        severity: "Medium",
        description: "Difficulties in managing and utilizing data effectively"
      }
    ],
    tools: {
      current: [
        "Microsoft Office Suite",
        "Salesforce",
        "Slack",
        "Zoom",
        "Asana"
      ],
      desired: [
        "AI-driven analytics tools",
        "Advanced CRM systems",
        "Automation platforms"
      ]
    }
  },
  customAttributes: [
    {
      name: "Technology adoption level",
      value: "Early majority",
      description: "Adopt new technologies after they have been tested by early adopters"
    },
    {
      name: "Communication style",
      value: "Formal and strategic",
      description: "Prefer structured and strategic communication"
    },
    {
      name: "Price sensitivity",
      value: "Low",
      description: "Willing to invest in high-quality solutions with proven ROI"
    },
    {
      name: "Specialization level",
      value: "High",
      description: "Possess deep expertise in their industry and role"
    }
  ]
};

// Helper components
const SectionTitle = ({ children, icon }: { children: React.ReactNode, icon?: React.ReactNode }) => (
  <div className="flex items-center gap-2 mb-4 mt-2">
    {icon}
    <h3 className="text-md font-semibold">{children}</h3>
  </div>
);

const AttributeCard = ({ title, value, description, className = "" }: { title: string, value: React.ReactNode, description?: string, className?: string }) => (
  <div className={`bg-muted/30 p-4 rounded-lg ${className}`}>
    <h4 className="text-sm font-medium text-muted-foreground mb-1">{title}</h4>
    <div className="text-base">{value}</div>
    {description && (
      <p className="text-sm text-muted-foreground mt-1 line-clamp-2">{description}</p>
    )}
  </div>
);

const SectionCard = ({ title, children, icon, className = "" }: { title: string, children: React.ReactNode, icon?: React.ReactNode, className?: string }) => {
  return (
    <Card className={`mb-6 ${className}`}>
      <CardHeader className="px-6 pb-2">
        <div className="flex items-center gap-2">
          {icon}
          <h3 className="text-md font-semibold">{title}</h3>
        </div>
      </CardHeader>
      <CardContent className="px-6">{children}</CardContent>
    </Card>
  );
};

const ImportanceIndicator = ({ level }: { level: string }) => {
  const getColor = () => {
    if (level.toLowerCase().includes('very high')) return "bg-green-500/30 text-green-700";
    if (level.toLowerCase().includes('high')) return "bg-green-300/30 text-green-600";
    if (level.toLowerCase().includes('medium-high')) return "bg-blue-300/30 text-blue-600";
    if (level.toLowerCase().includes('medium')) return "bg-yellow-200/30 text-yellow-700";
    if (level.toLowerCase().includes('low')) return "bg-red-200/30 text-red-700";
    return "bg-gray-100 text-gray-800";
  };
  
  const getTooltipText = () => {
    if (level.toLowerCase().includes('very high')) return "Critical factor with major significance";
    if (level.toLowerCase().includes('high')) return "Important factor with significant influence";
    if (level.toLowerCase().includes('medium-high')) return "Above-average importance";
    if (level.toLowerCase().includes('medium')) return "Average relevance and importance";
    if (level.toLowerCase().includes('low')) return "Less significant factor";
    return "Significance level indicator";
  };
  
  return (
    <div className="group relative inline-block">
      <span className={`text-xs px-2 py-0.5 rounded-full ${getColor()}`}>
        {level}
      </span>
      <span className="invisible opacity-0 group-hover:visible group-hover:opacity-100 transition-opacity absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 w-40 z-10 rounded-md bg-popover text-popover-foreground text-center text-xs py-1 px-2 shadow-md border">
        {getTooltipText()}
      </span>
    </div>
  );
};

export function SegmentICPTab({ segment }: SegmentICPTabProps) {
  // Si no hay perfil en el segmento, usar el perfil de ejemplo para demo
  const icpProfile = (segment.icp as ExtendedICP)?.profile || sampleICPProfile;
  const [activeTab, setActiveTab] = React.useState<string>("demographics");
  const [isMenuOpen, setIsMenuOpen] = React.useState<boolean>(false);
  
  const handleTabChange = (value: string) => {
    setActiveTab(value);
    setIsMenuOpen(false);
  };
  
  return (
    <div>
      <Card className="mb-6">
        <CardContent className="p-6">
          <h2 className="text-lg font-semibold">Ideal Customer Profile</h2>
          <p className="text-sm text-muted-foreground mt-1">
            {icpProfile.name}
          </p>
          <div className="bg-muted/20 p-4 rounded-lg mt-4">
            <p className="text-sm">{icpProfile.description}</p>
          </div>
        </CardContent>
      </Card>
      
      {/* KPI Summary Dashboard */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 xl:grid-cols-6 gap-3 lg:gap-4 mb-6 lg:mb-8">
        <div className="bg-card rounded-lg border p-2 sm:p-3 lg:p-4 flex flex-col items-center justify-center text-center">
          <Users className="h-5 w-5 lg:h-6 lg:w-6 mb-1 text-primary" />
          <h3 className="text-sm lg:text-lg font-bold leading-tight">{icpProfile.demographics.ageRange.primary}</h3>
          <p className="text-[10px] lg:text-xs text-muted-foreground">Age Range</p>
        </div>
        
        <div className="bg-card rounded-lg border p-2 sm:p-3 lg:p-4 flex flex-col items-center justify-center text-center">
          <Globe className="h-5 w-5 lg:h-6 lg:w-6 mb-1 text-primary" />
          <h3 className="text-sm lg:text-lg font-bold leading-tight">{icpProfile.demographics.locations[0].name}</h3>
          <p className="text-[10px] lg:text-xs text-muted-foreground">Primary Location</p>
        </div>
        
        <div className="bg-card rounded-lg border p-2 sm:p-3 lg:p-4 flex flex-col items-center justify-center text-center">
          <User className="h-5 w-5 lg:h-6 lg:w-6 mb-1 text-primary" />
          <h3 className="text-sm lg:text-lg font-bold leading-tight truncate w-full">{icpProfile.professionalContext.roles[0].title}</h3>
          <p className="text-[10px] lg:text-xs text-muted-foreground">Primary Role</p>
        </div>
        
        <div className="bg-card rounded-lg border p-2 sm:p-3 lg:p-4 flex flex-col items-center justify-center text-center">
          <PieChart className="h-5 w-5 lg:h-6 lg:w-6 mb-1 text-primary" />
          <h3 className="text-sm lg:text-lg font-bold leading-tight truncate w-full">{icpProfile.professionalContext.industries[0]}</h3>
          <p className="text-[10px] lg:text-xs text-muted-foreground">Primary Industry</p>
        </div>
        
        <div className="bg-card rounded-lg border p-2 sm:p-3 lg:p-4 flex flex-col items-center justify-center text-center">
          <HelpCircle className="h-5 w-5 lg:h-6 lg:w-6 mb-1 text-primary" />
          <h3 className="text-sm lg:text-lg font-bold leading-tight truncate w-full">{icpProfile.psychographics.challenges[0].name}</h3>
          <p className="text-[10px] lg:text-xs text-muted-foreground">Key Challenge</p>
        </div>
        
        <div className="bg-card rounded-lg border p-2 sm:p-3 lg:p-4 flex flex-col items-center justify-center text-center">
          <CheckCircle2 className="h-5 w-5 lg:h-6 lg:w-6 mb-1 text-primary" />
          <h3 className="text-sm lg:text-lg font-bold leading-tight truncate w-full">{icpProfile.psychographics.goals[0].name}</h3>
          <p className="text-[10px] lg:text-xs text-muted-foreground">Primary Goal</p>
        </div>
      </div>
      
      <Tabs defaultValue="demographics" value={activeTab} onValueChange={setActiveTab}>
        <div className="flex flex-col space-y-2 sm:hidden mb-6">
          <Button 
            variant="outline" 
            className="justify-between w-full"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            <span>
              {activeTab === "demographics" && "Demographics"}
              {activeTab === "psychographics" && "Psychographics"}
              {activeTab === "behavior" && "Behavioral Traits"}
              {activeTab === "professional" && "Professional"}
              {activeTab === "custom" && "Custom Attributes"}
            </span>
            {isMenuOpen ? <ChevronUp className="h-4 w-4 ml-2" /> : <ChevronDown className="h-4 w-4 ml-2" />}
          </Button>
          <div className={`bg-card rounded-md border shadow-sm p-2 ${isMenuOpen ? 'block' : 'hidden'}`}>
            <div className="grid grid-cols-1 gap-1">
              <Button 
                variant={activeTab === "demographics" ? "default" : "ghost"} 
                className="justify-start" 
                size="sm"
                onClick={() => handleTabChange("demographics")}
              >
                <Users className="mr-2 h-4 w-4" />
                Demographics
              </Button>
              <Button 
                variant={activeTab === "psychographics" ? "default" : "ghost"} 
                className="justify-start" 
                size="sm"
                onClick={() => handleTabChange("psychographics")}
              >
                <Ban className="mr-2 h-4 w-4" />
                Psychographics
              </Button>
              <Button 
                variant={activeTab === "behavior" ? "default" : "ghost"} 
                className="justify-start" 
                size="sm"
                onClick={() => handleTabChange("behavior")}
              >
                <BarChart className="mr-2 h-4 w-4" />
                Behavioral Traits
              </Button>
              <Button 
                variant={activeTab === "professional" ? "default" : "ghost"} 
                className="justify-start" 
                size="sm"
                onClick={() => handleTabChange("professional")}
              >
                <User className="mr-2 h-4 w-4" />
                Professional
              </Button>
              <Button 
                variant={activeTab === "custom" ? "default" : "ghost"} 
                className="justify-start" 
                size="sm"
                onClick={() => handleTabChange("custom")}
              >
                <Tag className="mr-2 h-4 w-4" />
                Custom
              </Button>
            </div>
          </div>
        </div>
        <TabsList className="mb-6 overflow-x-auto hidden sm:inline-flex">
          <TabsTrigger value="demographics">
            <Users className="mr-2 h-4 w-4" />
            Demographics
          </TabsTrigger>
          <TabsTrigger value="psychographics">
            <Ban className="mr-2 h-4 w-4" />
            Psychographics
          </TabsTrigger>
          <TabsTrigger value="behavior">
            <BarChart className="mr-2 h-4 w-4" />
            Behavioral Traits
          </TabsTrigger>
          <TabsTrigger value="professional">
            <User className="mr-2 h-4 w-4" />
            Professional
          </TabsTrigger>
          <TabsTrigger value="custom">
            <Tag className="mr-2 h-4 w-4" />
            Custom
          </TabsTrigger>
        </TabsList>
        
        {/* Demographics Tab */}
        <TabsContent value="demographics" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
            <SectionCard title="Age & Gender" icon={<CalendarIcon className="h-5 w-5" />}>
              <div className="grid grid-cols-1 gap-4">
                <AttributeCard 
                  title="Age Range" 
                  value={
                    <div className="space-y-3">
                      {/* Age distribution visualization as stacked/grouped boxes */}
                      <div className="mt-2 pt-2">
                        <h4 className="text-sm font-medium mb-3">Age Distribution</h4>
                        <div className="flex items-end h-24 gap-1">
                          {['18-25', '26-34', '35-40', '41-50', '51-60', '61+'].map((range, i) => {
                            // Determine if this range overlaps with our primary or secondary ranges
                            const isPrimary = icpProfile.demographics.ageRange.primary.includes(range) ||
                                             range.includes(icpProfile.demographics.ageRange.primary);
                            const isSecondary = icpProfile.demographics.ageRange.secondary.includes(range) ||
                                               range.includes(icpProfile.demographics.ageRange.secondary);
                            
                            // Determine height and style based on relevance
                            let height = '20%';
                            let style = 'bg-muted/50 border border-muted';
                            
                            if (isPrimary) {
                              height = '100%';
                              style = 'bg-primary/80 text-white';
                            } else if (isSecondary) {
                              height = '60%';
                              style = 'bg-primary/30 border border-primary/30';
                            }
                            
                            return (
                              <div key={i} className="flex flex-col items-center flex-1">
                                <div className={`w-full ${style} rounded-t-sm flex items-center justify-center relative group`} style={{ height }}>
                                  {isPrimary && (
                                    <span className="absolute text-[10px] text-white font-bold top-1">Primary</span>
                                  )}
                                  {isSecondary && height === '60%' && (
                                    <span className="absolute text-[10px] font-medium top-1">Secondary</span>
                                  )}
                                </div>
                                <span className="text-xs mt-1 text-muted-foreground">{range}</span>
                              </div>
                            );
                          })}
                        </div>
                        <div className="flex justify-between mt-3">
                          <div className="flex items-center">
                            <span className="h-3 w-3 bg-primary/80 rounded-sm mr-1"></span>
                            <span className="text-xs">Primary: {icpProfile.demographics.ageRange.primary}</span>
                          </div>
                          <div className="flex items-center">
                            <span className="h-3 w-3 bg-primary/30 rounded-sm mr-1"></span>
                            <span className="text-xs">Secondary: {icpProfile.demographics.ageRange.secondary}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  } 
                />
                <AttributeCard 
                  title="Gender Distribution" 
                  value={
                    <div className="space-y-3">
                      <p className="mb-2">{icpProfile.demographics.gender.distribution}</p>
                      
                      {/* Gender distribution visualization */}
                      {icpProfile.demographics.gender.distribution.toLowerCase().includes("balanced") && (
                        <div className="flex flex-col">
                          <div className="flex w-full h-10 rounded-lg overflow-hidden">
                            <div className="bg-blue-400/70 w-[52%] flex items-center justify-center text-white text-xs font-medium">
                              52%
                            </div>
                            <div className="bg-pink-400/70 w-[48%] flex items-center justify-center text-white text-xs font-medium">
                              48%
                            </div>
                          </div>
                          <div className="flex justify-between text-xs text-muted-foreground mt-1">
                            <div className="flex items-center">
                              <span className="h-3 w-3 bg-blue-400/70 rounded-sm mr-1"></span>
                              <span>Male</span>
                            </div>
                            <div className="flex items-center">
                              <span className="h-3 w-3 bg-pink-400/70 rounded-sm mr-1"></span>
                              <span>Female</span>
                            </div>
                          </div>
                        </div>
                      )}
                      {icpProfile.demographics.gender.distribution.toLowerCase().includes("male majority") && (
                        <div className="flex flex-col">
                          <div className="flex w-full h-10 rounded-lg overflow-hidden">
                            <div className="bg-blue-400/70 w-[65%] flex items-center justify-center text-white text-xs font-medium">
                              65%
                            </div>
                            <div className="bg-pink-400/70 w-[35%] flex items-center justify-center text-white text-xs font-medium">
                              35%
                            </div>
                          </div>
                          <div className="flex justify-between text-xs text-muted-foreground mt-1">
                            <div className="flex items-center">
                              <span className="h-3 w-3 bg-blue-400/70 rounded-sm mr-1"></span>
                              <span>Male</span>
                            </div>
                            <div className="flex items-center">
                              <span className="h-3 w-3 bg-pink-400/70 rounded-sm mr-1"></span>
                              <span>Female</span>
                            </div>
                          </div>
                        </div>
                      )}
                      {icpProfile.demographics.gender.distribution.toLowerCase().includes("female majority") && (
                        <div className="flex flex-col">
                          <div className="flex w-full h-10 rounded-lg overflow-hidden">
                            <div className="bg-blue-400/70 w-[35%] flex items-center justify-center text-white text-xs font-medium">
                              35%
                            </div>
                            <div className="bg-pink-400/70 w-[65%] flex items-center justify-center text-white text-xs font-medium">
                              65%
                            </div>
                          </div>
                          <div className="flex justify-between text-xs text-muted-foreground mt-1">
                            <div className="flex items-center">
                              <span className="h-3 w-3 bg-blue-400/70 rounded-sm mr-1"></span>
                              <span>Male</span>
                            </div>
                            <div className="flex items-center">
                              <span className="h-3 w-3 bg-pink-400/70 rounded-sm mr-1"></span>
                              <span>Female</span>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  } 
                />
              </div>
            </SectionCard>
            
            <SectionCard title="Location" icon={<Globe className="h-5 w-5" />}>
              <div className="grid grid-cols-1 gap-4">
                {/* Interactive World Map */}
                <div className="mb-4">
                  <WorldMap locations={icpProfile.demographics.locations} />
                </div>
              
                {icpProfile.demographics.locations.map((location, idx) => (
                  <AttributeCard 
                    key={idx}
                    title={`${location.type}: ${location.name}`} 
                    value={
                      <div className="flex items-center justify-between">
                        <ImportanceIndicator level={location.relevance} />
                        <Progress 
                          value={
                            location.relevance.toLowerCase().includes('very high') ? 90 :
                            location.relevance.toLowerCase().includes('high') ? 70 :
                            location.relevance.toLowerCase().includes('medium-high') ? 60 :
                            location.relevance.toLowerCase().includes('medium') ? 50 : 30
                          } 
                          className="h-2 w-3/4" 
                        />
                      </div>
                    } 
                  />
                ))}
              </div>
            </SectionCard>
            
            <SectionCard title="Education" icon={<FileText className="h-5 w-5" />}>
              <AttributeCard 
                title="Education Level" 
                value={
                  <div>
                    <div className="mb-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <Badge variant="default" className="mr-2">Primary</Badge>
                          <span className="font-medium">{icpProfile.demographics.education.primary}</span>
                        </div>
                        <CheckCircle2 className="h-5 w-5 text-primary" />
                      </div>
                    </div>
                    <div className="mt-2">
                      <p className="text-sm mb-2">Secondary:</p>
                      <div className="space-y-2">
                        {icpProfile.demographics.education.secondary.map((edu, idx) => (
                          <div key={idx} className="flex items-center justify-between bg-muted/30 p-2 rounded-md">
                            <span>{edu}</span>
                            {idx === 0 ? (
                              <Badge variant="outline" className="bg-primary/10">High relevance</Badge>
                            ) : (
                              <Badge variant="outline">Medium relevance</Badge>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                } 
              />
            </SectionCard>
            
            <SectionCard title="Income" icon={<PieChart className="h-5 w-5" />}>
              <AttributeCard 
                title={`Income Level (${icpProfile.demographics.income.currency})`} 
                value={
                  <div className="space-y-4">
                    <div>
                      <p className="font-medium mb-2">{icpProfile.demographics.income.range}</p>
                      <Badge className="mt-1">{icpProfile.demographics.income.level}</Badge>
                    </div>
                    
                    {/* Income bracket visualization */}
                    <div className="pt-3">
                      <h4 className="text-sm font-medium mb-3">Income Distribution</h4>
                      <div className="relative h-12 bg-muted rounded-lg overflow-hidden">
                        {/* Income brackets */}
                        <div className="absolute inset-0 flex">
                          <div className="w-1/5 border-r border-background"></div>
                          <div className="w-1/5 border-r border-background"></div>
                          <div className="w-1/5 border-r border-background"></div>
                          <div className="w-1/5 border-r border-background"></div>
                          <div className="w-1/5"></div>
                        </div>
                        
                        {/* Highlight current income level */}
                        <div 
                          className="absolute h-full bg-primary/20 border-l-2 border-r-2 border-primary" 
                          style={{ 
                            left: icpProfile.demographics.income.level.toLowerCase() === 'high' ? '60%' : 
                                  icpProfile.demographics.income.level.toLowerCase() === 'medium' ? '40%' : '20%',
                            width: '20%'
                          }}
                        ></div>
                        
                        {/* Target pointer */}
                        <div 
                          className="absolute bottom-0 w-0 h-0 transform -translate-x-1/2"
                          style={{ 
                            left: icpProfile.demographics.income.level.toLowerCase() === 'high' ? '70%' : 
                                  icpProfile.demographics.income.level.toLowerCase() === 'medium' ? '50%' : '30%',
                            borderLeft: '8px solid transparent',
                            borderRight: '8px solid transparent',
                            borderBottom: '8px solid var(--primary)'
                          }}
                        ></div>
                      </div>
                      <div className="flex justify-between text-xs text-muted-foreground mt-1">
                        <span>Low</span>
                        <span>Medium</span>
                        <span>High</span>
                      </div>
                    </div>
                  </div>
                } 
              />
            </SectionCard>
            
            <SectionCard title="Languages" icon={<MessageSquare className="h-5 w-5" />}>
              <div className="grid grid-cols-1 gap-4">
                {icpProfile.demographics.languages.map((language, idx) => (
                  <AttributeCard 
                    key={idx}
                    title={language.name} 
                    value={
                      <div className="space-y-2">
                        {/* Replace progress with better visualization */}
                        <div className="flex justify-between items-center">
                          <div className="flex gap-2 items-center">
                            <span className="text-sm">Proficiency:</span>
                            <Badge 
                              variant={language.proficiency.toLowerCase().includes('native') ? 'default' :
                                     language.proficiency.toLowerCase().includes('advanced') ? 'secondary' : 'outline'}
                            >
                              {language.proficiency}
                            </Badge>
                          </div>
                          <ImportanceIndicator level={language.relevance} />
                        </div>
                        
                        {/* Language proficiency blocks visualization */}
                        <div className="flex gap-1 mt-2">
                          {['Basic', 'Intermediate', 'Advanced', 'Native'].map((level, i) => {
                            const isActive = language.proficiency.toLowerCase().includes(level.toLowerCase()) ||
                                          (i <= ['Basic', 'Intermediate', 'Advanced', 'Native'].findIndex(
                                            l => language.proficiency.toLowerCase().includes(l.toLowerCase())
                                          ));
                            
                            return (
                              <div 
                                key={i} 
                                className={`flex-1 p-2 text-center text-xs font-medium rounded ${
                                  isActive ? 'bg-primary/80 text-white' : 'bg-muted'
                                }`}
                              >
                                {level}
                              </div>
                            );
                          })}
                        </div>
                        
                        {/* Relevance visualization as stars */}
                        <div className="flex gap-1 mt-1 items-center">
                          <span className="text-xs text-muted-foreground mr-1">Relevance:</span>
                          <div className="flex">
                            {[1, 2, 3, 4, 5].map((star) => {
                              const value = language.relevance.toLowerCase().includes('very high') ? 5 :
                                         language.relevance.toLowerCase().includes('high') ? 4 :
                                         language.relevance.toLowerCase().includes('medium-high') ? 3 :
                                         language.relevance.toLowerCase().includes('medium') ? 2 : 1;
                              
                              return (
                                <svg 
                                  key={star} 
                                  className={`w-4 h-4 ${star <= value ? 'text-yellow-400' : 'text-muted'}`}
                                  fill="currentColor"
                                  viewBox="0 0 20 20"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                </svg>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    } 
                  />
                ))}
              </div>
            </SectionCard>
          </div>
        </TabsContent>
        
        {/* Psychographics Tab */}
        <TabsContent value="psychographics" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <SectionCard title="Values & Interests" icon={<HelpCircle className="h-5 w-5" />}>
              <div className="grid grid-cols-1 gap-4">
                <AttributeCard 
                  title="Core Values" 
                  value={
                    <div>
                      {/* Replacing progress bars with a more intuitive visualization */}
                      <div className="rounded-lg bg-muted/20 p-3">
                        {icpProfile.psychographics.values.map((value, idx) => (
                          <div key={idx} className="mb-3 last:mb-0 flex items-start">
                            <div className={`min-w-[36px] h-9 mr-3 rounded-md ${
                              value.importance.toLowerCase().includes('very high') ? 'bg-primary' :
                              value.importance.toLowerCase().includes('high') ? 'bg-primary/70' :
                              value.importance.toLowerCase().includes('medium') ? 'bg-primary/40' : 'bg-primary/20'
                            } flex items-center justify-center`}>
                              <span className={`text-xs font-medium ${
                                value.importance.toLowerCase().includes('very high') || 
                                value.importance.toLowerCase().includes('high') ? 'text-white' : ''
                              }`}>
                                {idx + 1}
                              </span>
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center justify-between">
                                <span className="font-medium text-sm">{value.name}</span>
                                <Badge variant={
                                  value.importance.toLowerCase().includes('very high') ? 'default' :
                                  value.importance.toLowerCase().includes('high') ? 'secondary' : 'outline'
                                } className="text-xs">
                                  {value.importance}
                                </Badge>
                              </div>
                              <p className="text-xs text-muted-foreground mt-1">{value.description}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  } 
                />
                
                <AttributeCard 
                  title="Interests" 
                  value={
                    <div className="bg-muted/20 rounded-lg p-3">
                      <div className="flex flex-wrap gap-2">
                        {icpProfile.psychographics.interests.map((interest, idx) => (
                          <div 
                            key={idx} 
                            className={`px-3 py-1.5 rounded-lg text-xs font-medium ${
                              idx % 5 === 0 ? 'bg-blue-100 text-blue-700' : 
                              idx % 5 === 1 ? 'bg-green-100 text-green-700' : 
                              idx % 5 === 2 ? 'bg-amber-100 text-amber-700' : 
                              idx % 5 === 3 ? 'bg-purple-100 text-purple-700' : 
                              'bg-rose-100 text-rose-700'
                            }`}
                            style={{
                              fontSize: `${Math.min(0.75 + (idx % 3) * 0.1, 0.95)}rem`,
                              padding: `${Math.min(0.375 + (idx % 3) * 0.125, 0.75)}rem ${Math.min(0.75 + (idx % 3) * 0.125, 1.25)}rem`,
                            }}
                          >
                            {interest}
                          </div>
                        ))}
                      </div>
                    </div>
                  } 
                />
              </div>
            </SectionCard>
            
            <SectionCard title="Goals & Challenges" icon={<User className="h-5 w-5" />}>
              <div className="grid grid-cols-1 gap-4">
                <AttributeCard 
                  title="Goals" 
                  value={
                    <div className="space-y-2">
                      {/* Replacing progress bars with priority-based visualization */}
                      {['High', 'Medium', 'Low'].map((priority) => {
                        const priorityGoals = icpProfile.psychographics.goals.filter(g => 
                          g.priority.toLowerCase().includes(priority.toLowerCase())
                        );
                        
                        if (priorityGoals.length === 0) return null;
                        
                        return (
                          <div key={priority} className="bg-muted/20 p-3 rounded-lg">
                            <div className="flex items-center gap-2 mb-2">
                              <Badge variant={
                                priority === 'High' ? 'default' :
                                priority === 'Medium' ? 'secondary' : 'outline'
                              }>
                                {priority} Priority
                              </Badge>
                              <span className="text-xs text-muted-foreground">{priorityGoals.length} goals</span>
                            </div>
                            
                            <div className="space-y-2">
                              {priorityGoals.map((goal, idx) => (
                                <div key={idx} className="flex items-start">
                                  <div className={`mt-0.5 mr-2 h-4 w-4 rounded-full ${
                                    priority === 'High' ? 'bg-primary' :
                                    priority === 'Medium' ? 'bg-primary/50' : 'bg-muted'
                                  } flex-shrink-0`}></div>
                                  <div>
                                    <div className="text-sm font-medium">{goal.name}</div>
                                    <div className="text-xs text-muted-foreground">{goal.description}</div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  } 
                />
                
                <AttributeCard 
                  title="Challenges" 
                  value={
                    <div className="bg-muted/20 rounded-lg p-3">
                      <div className="grid grid-cols-2 gap-2">
                        {icpProfile.psychographics.challenges.map((challenge, idx) => {
                          // Calculate severity level
                          const severityLevel = challenge.severity.toLowerCase().includes('very high') ? 5 :
                                             challenge.severity.toLowerCase().includes('high') ? 4 :
                                             challenge.severity.toLowerCase().includes('medium-high') ? 3 :
                                             challenge.severity.toLowerCase().includes('medium') ? 2 : 1;
                          
                          // Map severity to appropriate colors
                          const bgColor = severityLevel >= 4 ? 'bg-red-50' :
                                       severityLevel === 3 ? 'bg-amber-50' : 'bg-blue-50';
                          const borderColor = severityLevel >= 4 ? 'border-red-200' :
                                          severityLevel === 3 ? 'border-amber-200' : 'border-blue-200';
                          const textColor = severityLevel >= 4 ? 'text-red-700' :
                                         severityLevel === 3 ? 'text-amber-700' : 'text-blue-700';
                          
                          return (
                            <div 
                              key={idx} 
                              className={`border rounded-lg p-2 ${bgColor} ${borderColor}`}
                            >
                              <div className="text-xs font-medium mb-1">{challenge.name}</div>
                              <div className="flex gap-1">
                                {[...Array(5)].map((_, i) => (
                                  <div 
                                    key={i} 
                                    className={`h-1.5 flex-1 rounded-full ${i < severityLevel ? textColor : 'bg-muted'}`}
                                  ></div>
                                ))}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  } 
                />
